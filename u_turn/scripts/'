#!/usr/bin/env python

import roslib; roslib.load_manifest('smach_ros')
import rospy
import smach
import smach_ros

from std_msgs.msg import String
from obstacle_detector.msg import Obstacles
from obstacle_detector.msg import SegmentObstacle 
from geometry_msgs.msg import Point

class Sequence(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome1'])
        self.counter = 0

    def execute(self, userdata):
        rospy.loginfo('Executing state FOO')
        rospy.sleep(3000)
        return 'outcome1'

class DynamicAvoidance:
    def __init__(self):
        self.obstacles_date = Obstacles()
        self.pub = rospy.Publisher('write', String, queue_size=10)
        self.sub = rospy.Subscriber('raw_obstacles', Obstacles, self.obstacles_cb)

    def calc_distance(self, point):
        distance = (point.x)**2 + (point.y)**2
        return distance

    def obstacles_cb(self, data):
        self.obstacles_data = data
        self.nearest_obstacle = self.obstacles_data.segments[0]
        self.nearest_center_point = Point()
        self.nearest_center_point.x = self.nearest_obstacle.first_point.x
        self.nearest_center_point.y = self.nearest_obstacle.first_point.y-self.nearest_obstacle.last_point.y 
        for obstacle in self.obstacles_data.segments:
            self.center_point = Point() 
            self.center_point.x = (obstacle.first_point.x-obstacle.last_point.x)/2 
            self.center_point.y = (obstacle.first_point.y-obstacle.last_point.y)/2 
            if self.calc_distance(self.nearest_center_point) > self.calc_distance(self.center_point) and self.center_point.x > 0:
                self.nearest_center_point = self.center_point
#            print(obstacle)
            print('------')
        print(self.nearest_center_point)
        print(self.nearest_obstacle)
        print('-------------------')

    def execute(self):
        rospy.init_node('dynamic_avoidance', anonymous=True)
        rate = rospy.Rate(100)
        while True:
            rate.sleep()

if __name__ == '__main__':
    try:
        dynamic_mission = DynamicAvoidance()
        dynamic_mission.execute()
    except rospy.ROSInterruptException:
        print(error)
        pass
